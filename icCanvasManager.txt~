#icCanvasManager

C++ core library that draws tiles based on a picture description.

The picture description consists of a number of drawing operations applied to
a single layered canvas. Drawing operations are stored in order and applied in
order; they represent the entire history of the canvas.

The canvas has a size of 2^32x2^32 samples. The default working scale of a
sample is 1/256th of a millimeter; A 2^8x2^8 region of samples comprises a
millimeter. (This could also be thought of as fixed-point arithmetic where there
are 24 whole bits and 8 fractional bits.) The result is that the canvas
comprises 16,777m of space at a resolution of 2,560 dpcm (or 6502 dpi). Or, more
roughly, the canvas could image individual yeast cells over an area larger than
Earth. It should be large enough for all practical cases.

Obviously a large canvas of this size would be unwieldy to store in memory or
even on disk - we're rivaling the storage requirements of Google Maps' satellite
imagery if we were to try and keep the entire canvas on disk. Instead, we use a
two-pronged approach. Firstly, the entire history of all drawing is stored in a
database. This database will be the most authoritative version of the state of
the drawing; which will allow for non-destructive editing of a painter's work.

Secondly, we will use a tile caching system to store rendered versions of the
painting history. The canvas manager's rendering system is based around taking
the user's painting history and rendering it into 256x256 tiles at various
predetermined sizes and positions. Tiles are arranged into a sparse tree of zoom
levels as follows.

The top-level node in the tree encompasses the entire 2^32 square drawing space
rendered as a single tile. From thereon, the drawing space is subdivided in four
pieces each storing a tile of the same size; this process continues onwards
until the lowest zoom level, which is a single tile the size of a millimeter.
The result is that there are 24 total zoom levels present in the tilecache tree
at any particular time. Not all nodes must be present and in fact most will not.
A typical drawing session at standard scale will see users working primarily in
zoom levels 16-24 for most cases; tiles will most likely not be stored for
anything more zoomed out than this.

Drawing operations are designed around extruding a brush about a curve. Curves
within the canvas are specified as multivariable beizer curves encompassing not
only point position, but also pen pressure and tilt angle. Pen pressure controls
the overall size of the brush at a particular point; while tilt angle controls
how thin or wide the brush is and what direction it points. The extruded brush
creates a drawing mask which is then colored according to the selected brush
color and opacity.

Drawing operations also include the creation, deletion, and manipulation of
layers in the canvas. Each layer is treated as it's own separate canvas which is
mixed with other layers to produce the final image.

--

All core methods exist within the icCanvasManager:: namespace and are expected
to rely on either:

1. C++ native functionality
2. Underlying libraries with high portability
3. Custom-designed abstraction layers

UI is outside the scope of the Canvas Manager component. It will be handled by
non-portable Canvas Manager frontends, which implement a native UI for a single
target platform as well as whatever is needed by the Canvas Manager abstraction
layers.

Important classes within the Canvas Manager API include:

ITileSrc
    
    Represents an object which can provide rendered tiles to a frontend for
    display.
    
    void renderSize(int* out_width, int* out_height);
        Retrieve the current render size of the tilesource. This specifies the
        allowable size of render surfaces.
        
        A negative value of out_width or out_height indicates that the
        implementation supports any valid size on that dimension. A value of
        zero on either parameter is reserved for future specifications.
    
    void renderTileInTree(int32_t x, int32_t y, int level, int timestart, int timeend, cairo_surface_t* surf);
        Render the tile source at a specific position and level of detail.
        
        The X, Y, and Level collectively indicate a particular position and zoom
        level within the canvas tile tree. The level parameter indicates how
        closely zoomed in the resulting tile is. Specifically, zoom level 0
        indicates a range which covers the entire canvas space; and each level
        down doubles the size of the canvas until level 32, which covers a
        single canvas sample.
        
        All tiles are rendered to the specified Cairo surface. The surface
        must be sized compatibly with the tile source's specifications.
        
        The last two parameters, timestart and timeend, control what portion of
        the canvas timeline is rendered. All rendering occurs starting from a
        zero-RGBA canvas.

Layer
    
    Represents an object which provides hierarchial organization of a drawing.
    
    Layers contain child layers which are organized into an ordered stack.
    Each child layer blends with the previous one according to the five Porter-
    Duff compositing operations and an alpha parameter.
    
    Layer::sublayer_iterator
        STL-compliant random access iterator type for iterating sublayers.
    
    sublayer_iterator sublayers_begin(),
    sublayer_iterator sublayers_end()
        Returns iterators to the beginning or the end of the stack of sublayers.
    
    void get_blending_mode(sublayer_iterator& which, int* out_alpha, Layer::blendmode* out_mode),
    void set_blending_mode(sublayer_iterator& which, int alpha, Layer::blendmode mode)
        Retrieve or set the blending mode for this child layer.
        
        The modes are defined in a related blendmode enum. The valid values are
        listed below. Layers are blended together, starting from the topmost
        layer and flattening down layer by layer. Each blendmode is defined as
        an operation between the current layer and the one below it. The
        bottommost layer is then blended with the contents of the parent layer
        to produce the current layer's final image.
        
         - BLEND_PDOVER
        
            Pixels from this layer are mixed with pixels from the next layer
            down to produce the composited pixels. Alpha controls how much the
            color influences the color below it.
            
        Changing the blending mode creates a history entry.

Brush

    A drawable which may be drawn extended atop a brushstroke.
    
    A brush is defined as a drawing shape tied to various behaviors. The drawing
    shape may be rotated, resized, recolored, or thinned according to the brush
    configuration and the paired brushstroke's pen data.
    
    The color of the brushstroke determines the base color of the brush. The
    brush drawable determines how much of that color is deposited on the
    drawing. Beyond that, brush behaviors may be configured to deform the
    drawable or the brushstroke color.
    
    A stroke behavior consists of source data from the stroke, a target brush
    property, and a scaling factor.
    
    The source data for a brush behavior are stroke velocity, pressure, tilt,
    and angle. These data can be used to make the brush thinner or thicker,
    decrease it's opacity, rotate the brush or lengthen it, or change the brush
    saturation, hue, and/or value. Each brush behavior is executed in-order to
    determine the final brush shape, and is interpolated across stroke curve
    segments.

BrushStroke
    
    An individual brush drawing operation.
    
    More specifically, a BrushStroke involves drawing a Brush about a Beizer
    curve defined by a host of various attributes including pen position, tilt,
    and pressure.
    
    When created, BrushStrokes may be manipulated programmatically until
    committed into the drawing. At that point, the brush stroke becomes a part
    of the drawing history and cannot be changed in-place.
    
    PRESSURE_MAX = 65,536
        The pressure value that indicates the pen is firmly and fully pressed
        against the drawing surface.
        
        Pen pressure is represented as a value on the half-open range
        [0, PRESSURE_MAX).
        
    TILT_ANGLE_QUARTER = 32,400
    TILT_ANGLE_HALF = 64,800
    TILT_ANGLE_FULL = 129,600
        The pen angle values which represent quarter, half, and full turns.
        
        Tilt values are represented as pen tilt and pen angle. Pen tilt is the
        angle between the pen and the imaginary line perpendicular to the
        writing surface (e.g. the z-axis). Tilt angle is the angle between the
        positive x-axis of the writing surface and the pen at full tilt (e.g.
        if the pen were to be projected onto the writing surface).
        
        Pen tilt is defined on the closed range of [-TILT_ANGLE_QUARTER,
        TILT_ANGLE_QUARTER]. Pen angle is defined on the half-open range of [0, 
        TILT_ANGLE_FULL], with all calculations done mod TILT_ANGLE_FULL. Units
        are in 1/360ths of a degree.
        
    VELOCITY VALUES
        There are no specific constants for velocity.
        
        Velocity is represented as canvas units per second, as measured by the
        frontend; velocity is independently calculated for X and Y directions of
        the canvas.
    
    void pen_begin(int32_t x, int32_t y),
    void pen_begin_pressure(int32_t pressure),
    void pen_begin_tilt(int32_t tilt, int32_t angle),
    void pen_begin_velocity(int32_t delta_x, int32_t delta_y),
    void pen_to(int32_t fromcp_x, int32_t fromcp_y, int32_t tocp_x,
        int32_t tocp_y, int32_t to_x, int32_t to_y),
    void pen_to_pressure(int32_t fromcp_pressure, int32_t tocp_pressure,
        int32_t to_pressure),
    void pen_to_tilt(int32_t fromcp_tilt, int32_t fromcp_angle,
        int32_t tocp_tilt, int32_t tocp_angle, int32_t to_tilt,
        int32_t to_angle),
    void pen_to_velocity(int32_t fromcp_delta_x, int32_t fromcp_delta_y,
        int32_t tocp_delta_x, int32_t tocp_delta_y, int32_t to_delta_x,
        int32_t to_delta_y),
    void pen_back()
        Control basic curve drawing.
        
        The pen_begin method specifies the start of the brushstroke and begins
        the curve. (It also clears any existing pen data and starts the curve
        anew.)
        
        The pen_to method specifies an additional Beizer curve segment. The
        start point of the new segment overlaps the end point of the previous
        segment (or the start point of the curve). The two control handles for
        this segment are specified in the fromcp_* and tocp_* parameters, while
        the endpoint of the segment is specified in the to_* parameter.
        
        The pen_back method allows the user to delete the previously entered
        curve segment, assuming it exists.
        
        Methods ending in _pressure specify pressure data for the last specified
        Beizer curve segment. Likewise, _tilt and _velocity specifies the tilt
        and velocity data for the same segment.
        
        Velocity is defined as the speed of the user's pen in canvas units per
        second. It should not be confused with the derivative of the actual
        curve.
        
    void commit()
        Commit this brushstroke to the drawing history.
        
        After committing, you can no longer manipulate the brushstroke directly
        (pen_* methods silently fail). Instead, you must delete the stroke and
        reinsert it back into the drawing history.

BrushLayer
    
    A layer which accepts and renders BrushStroke operations.
    
    BrushStroke* begin_stroke()
        Create a BrushStroke object which the client may fill with drawing info.
        Use it's commit method to add it to the layer and drawing history.

CanvasDocument
    
    Represents an open canvas as described in the above document.
    
    More specifically, a CanvasDocument is the ultimate parent of most other
    objects listed in the API, and is responsible for managing various document
    wide systems such as the document history, layer stack, rendering cache, and
    so on and so forth.
